åçdescription "Upstart job definition for the proxy-node-app Node application"
author "Jed Richards"

# Automatically start the app when the filesystem and networking become available.
# Automatically stop the app on system shutdown.

start on filesystem and started networking
stop on shutdown

# Export a bunch of environment variables to be used in the scripts.

env APP=/var/local/node-apps/proxy-node-app/index.js
env APP_NAME=proxy-node-app
env USER=root
env PORT=80
env NODE_ENV=production
env NODE_BIN=/usr/bin/node
env LOG_DIR=/var/opt/node/log
env PID_DIR=/var/opt/node/run

# The pre-start script executes just before the app is started.
# We make the log directory and the run directory for storing
# pid files. Additionally we set ownership of these to the node user.

pre-start script
    mkdir -p $LOG_DIR
    mkdir -p $PID_DIR
    chown -R node:node $LOG_DIR
    chown -R node:node $PID_DIR
end script

# This script actually starts the app. Firstly we create a pidfile
# for the app. This just stores the app's process number which
# Monit will find useful. Secondly we invoke the actual app.
# Since this is a front-facing reverse proxy it needs to start on
# port 80 so we start as root, then downgrade to the node user
# internally in the app code. For any other standard Node app however
# we should start as the node user from the beginning, stdout and
# stderr from the Node app are both piped through to the log file.

script
    echo $$ > $PID_DIR/$APP_NAME.pid
    exec su -c 'PORT=$PORT NODE_ENV=$NODE_ENV $NODE_BIN $APP' $USER >> $LOG_DIR/$APP_NAME.log 2>&1
end script

# The post-stop script executes after the app has shut down, and in
# this case all we need to do is clean up the pidfile.

post-stop script
    rm -f $PID_DIR/$APP_NAME.pid
end script